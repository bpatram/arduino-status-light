/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CommandRequest', null, global);
goog.exportSymbol('proto.CommandRequest.Command', null, global);
goog.exportSymbol('proto.Relay', null, global);
goog.exportSymbol('proto.StatusResponse', null, global);
goog.exportSymbol('proto.StatusResponse.State', null, global);
goog.exportSymbol('proto.StatusResponse.Status', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StatusResponse.displayName = 'proto.StatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.StatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    relayone: (f = msg.getRelayone()) && proto.StatusResponse.Status.toObject(includeInstance, f),
    relaytwo: (f = msg.getRelaytwo()) && proto.StatusResponse.Status.toObject(includeInstance, f),
    relaythree: (f = msg.getRelaythree()) && proto.StatusResponse.Status.toObject(includeInstance, f),
    relayfour: (f = msg.getRelayfour()) && proto.StatusResponse.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StatusResponse}
 */
proto.StatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StatusResponse;
  return proto.StatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StatusResponse}
 */
proto.StatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.StatusResponse.Status;
      reader.readMessage(value,proto.StatusResponse.Status.deserializeBinaryFromReader);
      msg.setRelayone(value);
      break;
    case 2:
      var value = new proto.StatusResponse.Status;
      reader.readMessage(value,proto.StatusResponse.Status.deserializeBinaryFromReader);
      msg.setRelaytwo(value);
      break;
    case 3:
      var value = new proto.StatusResponse.Status;
      reader.readMessage(value,proto.StatusResponse.Status.deserializeBinaryFromReader);
      msg.setRelaythree(value);
      break;
    case 4:
      var value = new proto.StatusResponse.Status;
      reader.readMessage(value,proto.StatusResponse.Status.deserializeBinaryFromReader);
      msg.setRelayfour(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelayone();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.StatusResponse.Status.serializeBinaryToWriter
    );
  }
  f = message.getRelaytwo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.StatusResponse.Status.serializeBinaryToWriter
    );
  }
  f = message.getRelaythree();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.StatusResponse.Status.serializeBinaryToWriter
    );
  }
  f = message.getRelayfour();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.StatusResponse.Status.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.StatusResponse.State = {
  OFF: 0,
  ON: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StatusResponse.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StatusResponse.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StatusResponse.Status.displayName = 'proto.StatusResponse.Status';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StatusResponse.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.StatusResponse.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StatusResponse.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StatusResponse.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    relay: jspb.Message.getField(msg, 1),
    state: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StatusResponse.Status}
 */
proto.StatusResponse.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StatusResponse.Status;
  return proto.StatusResponse.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StatusResponse.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StatusResponse.Status}
 */
proto.StatusResponse.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Relay} */ (reader.readEnum());
      msg.setRelay(value);
      break;
    case 2:
      var value = /** @type {!proto.StatusResponse.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StatusResponse.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StatusResponse.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StatusResponse.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StatusResponse.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Relay} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.StatusResponse.State} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * required Relay relay = 1;
 * @return {!proto.Relay}
 */
proto.StatusResponse.Status.prototype.getRelay = function() {
  return /** @type {!proto.Relay} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Relay} value */
proto.StatusResponse.Status.prototype.setRelay = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.StatusResponse.Status.prototype.clearRelay = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StatusResponse.Status.prototype.hasRelay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required State state = 2;
 * @return {!proto.StatusResponse.State}
 */
proto.StatusResponse.Status.prototype.getState = function() {
  return /** @type {!proto.StatusResponse.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.StatusResponse.State} value */
proto.StatusResponse.Status.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.StatusResponse.Status.prototype.clearState = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StatusResponse.Status.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required Status relayOne = 1;
 * @return {!proto.StatusResponse.Status}
 */
proto.StatusResponse.prototype.getRelayone = function() {
  return /** @type{!proto.StatusResponse.Status} */ (
    jspb.Message.getWrapperField(this, proto.StatusResponse.Status, 1, 1));
};


/** @param {!proto.StatusResponse.Status} value */
proto.StatusResponse.prototype.setRelayone = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.StatusResponse.prototype.clearRelayone = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StatusResponse.prototype.hasRelayone = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Status relayTwo = 2;
 * @return {!proto.StatusResponse.Status}
 */
proto.StatusResponse.prototype.getRelaytwo = function() {
  return /** @type{!proto.StatusResponse.Status} */ (
    jspb.Message.getWrapperField(this, proto.StatusResponse.Status, 2, 1));
};


/** @param {!proto.StatusResponse.Status} value */
proto.StatusResponse.prototype.setRelaytwo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.StatusResponse.prototype.clearRelaytwo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StatusResponse.prototype.hasRelaytwo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required Status relayThree = 3;
 * @return {!proto.StatusResponse.Status}
 */
proto.StatusResponse.prototype.getRelaythree = function() {
  return /** @type{!proto.StatusResponse.Status} */ (
    jspb.Message.getWrapperField(this, proto.StatusResponse.Status, 3, 1));
};


/** @param {!proto.StatusResponse.Status} value */
proto.StatusResponse.prototype.setRelaythree = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.StatusResponse.prototype.clearRelaythree = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StatusResponse.prototype.hasRelaythree = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required Status relayFour = 4;
 * @return {!proto.StatusResponse.Status}
 */
proto.StatusResponse.prototype.getRelayfour = function() {
  return /** @type{!proto.StatusResponse.Status} */ (
    jspb.Message.getWrapperField(this, proto.StatusResponse.Status, 4, 1));
};


/** @param {!proto.StatusResponse.Status} value */
proto.StatusResponse.prototype.setRelayfour = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.StatusResponse.prototype.clearRelayfour = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StatusResponse.prototype.hasRelayfour = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CommandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CommandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CommandRequest.displayName = 'proto.CommandRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CommandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CommandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CommandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getField(msg, 1),
    relay: jspb.Message.getFieldWithDefault(msg, 2, 0),
    iterations: jspb.Message.getFieldWithDefault(msg, 3, 1),
    onmillis: jspb.Message.getFieldWithDefault(msg, 4, 500),
    offmillis: jspb.Message.getFieldWithDefault(msg, 5, 500),
    pausemillis: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CommandRequest}
 */
proto.CommandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CommandRequest;
  return proto.CommandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CommandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CommandRequest}
 */
proto.CommandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.CommandRequest.Command} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {!proto.Relay} */ (reader.readEnum());
      msg.setRelay(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIterations(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOnmillis(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffmillis(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPausemillis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CommandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CommandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CommandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CommandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.CommandRequest.Command} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.Relay} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.CommandRequest.Command = {
  STATUS: 0,
  HELP: 1,
  ON: 2,
  OFF: 3,
  INVERT: 4,
  SEQUENCE: 5,
  FLASH: 6,
  DEMO: 7
};

/**
 * required Command command = 1;
 * @return {!proto.CommandRequest.Command}
 */
proto.CommandRequest.prototype.getCommand = function() {
  return /** @type {!proto.CommandRequest.Command} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.CommandRequest.Command} value */
proto.CommandRequest.prototype.setCommand = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.CommandRequest.prototype.clearCommand = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CommandRequest.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Relay relay = 2;
 * @return {!proto.Relay}
 */
proto.CommandRequest.prototype.getRelay = function() {
  return /** @type {!proto.Relay} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Relay} value */
proto.CommandRequest.prototype.setRelay = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.CommandRequest.prototype.clearRelay = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CommandRequest.prototype.hasRelay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 iterations = 3;
 * @return {number}
 */
proto.CommandRequest.prototype.getIterations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {number} value */
proto.CommandRequest.prototype.setIterations = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.CommandRequest.prototype.clearIterations = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CommandRequest.prototype.hasIterations = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 onMillis = 4;
 * @return {number}
 */
proto.CommandRequest.prototype.getOnmillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 500));
};


/** @param {number} value */
proto.CommandRequest.prototype.setOnmillis = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.CommandRequest.prototype.clearOnmillis = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CommandRequest.prototype.hasOnmillis = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 offMillis = 5;
 * @return {number}
 */
proto.CommandRequest.prototype.getOffmillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 500));
};


/** @param {number} value */
proto.CommandRequest.prototype.setOffmillis = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.CommandRequest.prototype.clearOffmillis = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CommandRequest.prototype.hasOffmillis = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 pauseMillis = 6;
 * @return {number}
 */
proto.CommandRequest.prototype.getPausemillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.CommandRequest.prototype.setPausemillis = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.CommandRequest.prototype.clearPausemillis = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CommandRequest.prototype.hasPausemillis = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.Relay = {
  ALL: 0,
  ONE: 1,
  TWO: 2,
  THREE: 3,
  FOUR: 4
};

goog.object.extend(exports, proto);
